AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Parameters:
  # These parameters can be removed if
  # the project doesn't need an API
  EnableLambdaTracing:
    Description: Enable X-Ray tracing in Lambdas
    Type: String
    Default: Active
    AllowedValues:
      - Active
      - PassThrough
  CertificateArn:
    Description: The certificate ARN for the region
    Type: String
  LoggerLevel:
    Description: "the logger lever used to filter output, can be on of error,warning,info,trace"
    Type: String
    Default: info
  EventBusName:
    Description: "the event bus used to put message and read messages. used to test the domain without interferences with others"
    Type: String
    Default: default
  CreateEventBus:
    Type: String
    Default: false
  QueueReceiveCount:
    Type: Number
    Default: 5
  BatchSize:
    Type: Number
    Default: 5
  DatalakeDataBucketName:
    Type: String

Conditions:
  IsCustomEventBus: !Equals [!Ref CreateEventBus, "true"]

Globals:
  Function:
    Runtime: nodejs12.x
    Timeout: 180
    Tracing: Active
    Environment:
      Variables:
        AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
        LOGGER_LEVEL: !Ref LoggerLevel
        NODE_OPTIONS: "--enable-source-maps"
        EVENT_BUS_NAME: !If [IsCustomEventBus, !Ref EventBus, "default"]

Resources:
  NodeModulesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "${AWS::StackName}-NodeModulesLayer"
      Description: node modules
      ContentUri: ../dist/layer
      CompatibleRuntimes:
        - nodejs12.x

  EventBus:
    Type: AWS::Events::EventBus
    Condition: IsCustomEventBus
    Properties:
      Name: !Ref EventBusName

  DynamoApp:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./dynamo.yml

  # AsyncLambdaApp:
  #   Type: AWS::Serverless::Application
  #   Properties:
  #     Location: ./async.yml
  #     Parameters:
  #       Layer: !Ref NodeModulesLayer
  #       EnableLambdaTracing: !Ref EnableLambdaTracing
  #       LoggerLevel: !Ref LoggerLevel
  #       EventBusName: !If [IsCustomEventBus, !Ref EventBus, "default"]
  #       QueueReceiveCount: !Ref QueueReceiveCount
  #       BatchSize: !Ref BatchSize
  #       FifoQueuePrefix: !Ref AWS::StackName

  InitializeProfitSharing:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./initialize-profit-sharing.yml
      Parameters:
        Layer: !Ref NodeModulesLayer
        EnableLambdaTracing: !Ref EnableLambdaTracing
        LoggerLevel: !Ref LoggerLevel
        EventBusName: !If [IsCustomEventBus, !Ref EventBus, "default"]
        QueueReceiveCount: !Ref QueueReceiveCount
        BatchSize: !Ref BatchSize
        FifoQueuePrefix: !Ref AWS::StackName
        ProfitSharingTableName: !GetAtt DynamoApp.Outputs.ProfitSharingTableName

  Purchase:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./purchase.yml
      Parameters:
        Layer: !Ref NodeModulesLayer
        EnableLambdaTracing: !Ref EnableLambdaTracing
        LoggerLevel: !Ref LoggerLevel
        EventBusName: !If [IsCustomEventBus, !Ref EventBus, "default"]
        QueueReceiveCount: !Ref QueueReceiveCount
        BatchSize: !Ref BatchSize
        FifoQueuePrefix: !Ref AWS::StackName
        ProfitSharingTableName: !GetAtt DynamoApp.Outputs.ProfitSharingTableName
        ProfitSharingStateMachineArn: !GetAtt ProfitSharingWorkflow.Outputs.ProfitSharingStateMachineArn
        ProfitSharingStateMachineName: !GetAtt ProfitSharingWorkflow.Outputs.ProfitSharingStateMachineName

  ProfitSharingWorkflow:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./wf-profit-sharing.yml
      Parameters:
        Layer: !Ref NodeModulesLayer
        EnableLambdaTracing: !Ref EnableLambdaTracing
        LoggerLevel: !Ref LoggerLevel
        EventBusName: !If [IsCustomEventBus, !Ref EventBus, "default"]
        QueueReceiveCount: !Ref QueueReceiveCount
        BatchSize: !Ref BatchSize
        FifoQueuePrefix: !Ref AWS::StackName
        ProfitSharingTableName: !GetAtt DynamoApp.Outputs.ProfitSharingTableName
        DatalakeDataBucketName: !Ref DatalakeDataBucketName

  GeneraliPBResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name: !Sub "${AWS::StackName}-resource-group"
      Description: !Sub "${AWS::StackName} Resource Group"
      ResourceQuery:
        Type: TAG_FILTERS_1_0
        Query:
          ResourceTypeFilters:
            - AWS::AllSupported
          TagFilters:
            - Key: ekonoo:cloudformation:stack-name
              Values:
                - !Ref AWS::StackName
# Outputs:

